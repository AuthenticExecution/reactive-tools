# Connection rules

to_module required:
  is_present(dict_, "to_module")

encryption required:
  is_present(dict_, "encryption")

established must be a bool, if exists:
  not is_present(dict_, "established") or
  (is_present(dict_, "established") and isinstance(dict_["established"], bool))

either direct=True or from_module + from_{output, request}:
  has_value(dict_, "direct", True) !=
  (is_present(dict_, "from_module") and
        (is_present(dict_, "from_output") != is_present(dict_, "from_request")))

either one between to_input and to_handler:
  is_present(dict_, "to_input") != is_present(dict_, "to_handler")

direct or from_output->to_input or from_request->to_handler:
  has_value(dict_, "direct", True) or
  (is_present(dict_, "from_output") and is_present(dict_, "to_input")) or
  (is_present(dict_, "from_request") and is_present(dict_, "to_handler"))

key mandatory after establishment:
  not has_value(dict_, "established", True) or
  (has_value(dict_, "established", True) and is_present(dict_, "key"))

nonce mandatory after establishment:
  not has_value(dict_, "established", True) or
  (has_value(dict_, "established", True) and is_present(dict_, "nonce"))

id mandatory after establishment:
  not has_value(dict_, "established", True) or
  (has_value(dict_, "established", True) and is_present(dict_, "id"))

name mandatory after establishment:
  not has_value(dict_, "established", True) or
  (has_value(dict_, "established", True) and is_present(dict_, "name"))

direct mandatory after establishment:
  not has_value(dict_, "established", True) or
  (has_value(dict_, "established", True) and is_present(dict_, "direct"))

from_module and to_module must be different:
  dict_.get("from_module") != dict_["to_module"]

only authorized keys:
  authorized_keys(dict_, ["name", "from_module", "from_output",
  "from_request", "to_module", "to_input", "to_handler",
  "encryption", "key", "id", "direct", "nonce", "established"])
